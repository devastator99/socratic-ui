import React, { useState, useRef } from 'react';
import { View, Text, StyleSheet, ScrollView, TextInput, TouchableOpacity, KeyboardAvoidingView, Platform } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useLocalSearchParams, useRouter } from 'expo-router';
import { Send, Sparkles, Coins, CircleHelp as HelpCircle, ArrowLeft, FileText } from 'lucide-react-native';
import { trackEvent, trackScreen } from '@/utils/analytics';
import { ChatMessage } from '@/components/ChatMessage';
import { TokenTrackerBar } from '@/components/TokenTrackerBar';
import { SmartSuggestions } from '@/components/SmartSuggestions';
import { MintInsightButton } from '@/components/MintInsightButton';

const sampleMessages = [
  {
    id: '1',
    content: 'Hello! I can help you learn from your uploaded documents. What would you like to explore today?',
    isUser: false,
    timestamp: new Date(),
    canMint: false,
  },
  {
    id: '2',
    content: 'Can you explain the key differences between supervised and unsupervised learning from my ML document?',
    isUser: true,
    timestamp: new Date(),
    canMint: false,
  },
  {
    id: '3',
    content: 'Based on your Machine Learning Fundamentals document, here are the key differences:\n\n**Supervised Learning:**\n- Uses labeled training data\n- Goal is to predict outcomes for new data\n- Examples: classification, regression\n\n**Unsupervised Learning:**\n- Works with unlabeled data\n- Finds hidden patterns and structures\n- Examples: clustering, dimensionality reduction',
    isUser: false,
    timestamp: new Date(),
    canMint: true,
  },
];

const suggestions = [
  'Explain neural network architectures',
  'Compare different optimization algorithms',
  'What are the main types of loss functions?',
  'How does backpropagation work?',
];

export default function ChatScreen() {
  const router = useRouter();
  const params = useLocalSearchParams<{ id?: string; title?: string }>();
  const [messages, setMessages] = useState(sampleMessages);
  const [inputText, setInputText] = useState('');
  const [selectedMessageId, setSelectedMessageId] = useState<string | null>(null);
  const scrollViewRef = useRef<ScrollView>(null);
  const [menuOpen, setMenuOpen] = useState(false);
  React.useEffect(() => {
    trackScreen('Chat');
  }, []);

  const sendMessage = () => {
    if (inputText.trim()) {
      const newMessage = {
        id: Date.now().toString(),
        content: inputText,
        isUser: true,
        timestamp: new Date(),
        canMint: false,
      };
      setMessages([...messages, newMessage]);
      setInputText('');
      trackEvent('chat_send', { length: inputText.length, docId: params.id || '' });
      
      // Simulate AI response
      setTimeout(() => {
        const aiResponse = {
          id: (Date.now() + 1).toString(),
          content: 'This is a simulated AI response to your question. In a real implementation, this would be generated by your RAG-powered backend.',
          isUser: false,
          timestamp: new Date(),
          canMint: true,
        };
        setMessages(prev => [...prev, aiResponse]);
        trackEvent('chat_ai_response', { docId: params.id || '' });
      }, 1000);
    }
  };

  const handleSuggestionPress = (suggestion: string) => {
    setInputText(suggestion);
  };

  const handleMintInsight = (messageId: string) => {
    console.log('Minting insight for message:', messageId);
    // Implement NFT minting logic
  };

  const exportChat = () => {
    // Simple export placeholder: join messages into a single text
    const text = messages.map(m => `${m.isUser ? 'You' : 'AI'}: ${m.content}`).join('\n\n');
    console.log('Export chat:\n', text);
    trackEvent('chat_export', { messages: messages.length, docId: params.id || '' });
  };

  const clearChat = () => {
    setMessages([]);
    setMenuOpen(false);
    trackEvent('chat_clear', { docId: params.id || '' });
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <View style={styles.headerLeft}>
          <TouchableOpacity accessibilityLabel="Go back" onPress={() => router.back()} style={styles.headerBtn}>
            <ArrowLeft size={18} color="#FFFFFF" strokeWidth={2} />
          </TouchableOpacity>
          <View style={styles.docIcon}>
            <FileText size={16} color="#FFFFFF" strokeWidth={1.5} />
          </View>
          <View>
            <Text style={styles.title}>{params.title ? `${params.title}` : 'Chat & Learn'}</Text>
            <Text style={styles.subtitle}>AI-powered document Q&A</Text>
          </View>
        </View>
        <View style={styles.headerRight}>
          <View style={styles.costInfo}>
            <Coins size={16} color="#888888" strokeWidth={1.5} />
            <Text style={styles.costText}>0.1 SOL/Q</Text>
          </View>
          <TouchableOpacity accessibilityLabel="More options" onPress={() => setMenuOpen(v => !v)} style={styles.headerBtn}>
            <Text style={{ color: '#fff', fontSize: 18, lineHeight: 18 }}>â‹®</Text>
          </TouchableOpacity>
        </View>

        {menuOpen && (
          <View style={styles.menuContainer}>
            <TouchableOpacity style={styles.menuItem} onPress={() => { exportChat(); setMenuOpen(false); }}>
              <Text style={styles.menuItemText}>Export chat</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.menuItem} onPress={clearChat}>
              <Text style={[styles.menuItemText, { color: '#ff6b6b' }]}>Clear chat</Text>
            </TouchableOpacity>
          </View>
        )}
      </View>

      <TokenTrackerBar balance={12.5} questionsLeft={125} />

      <KeyboardAvoidingView 
        style={styles.chatContainer}
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        keyboardVerticalOffset={Platform.OS === 'ios' ? 90 : 0}
      >
        <ScrollView
          ref={scrollViewRef}
          style={styles.messagesContainer}
          showsVerticalScrollIndicator={false}
          onContentSizeChange={() => scrollViewRef.current?.scrollToEnd({ animated: true })}
        >
          {messages.map((message) => (
            <ChatMessage
              key={message.id}
              message={message}
              onLongPress={() => setSelectedMessageId(message.id)}
              isSelected={selectedMessageId === message.id}
            />
          ))}
        </ScrollView>

        <SmartSuggestions
          suggestions={params.title ? [
            `Summarize ${params.title}`,
            `Key terms in ${params.title}`,
            `Find contradictions in ${params.title}`,
            `What are the main takeaways from ${params.title}?`,
          ] : suggestions}
          onSuggestionPress={handleSuggestionPress}
        />

        <View style={styles.inputContainer}>
          <TextInput
            style={styles.textInput}
            value={inputText}
            onChangeText={setInputText}
            placeholder="Ask a question about your documents..."
            placeholderTextColor="#666666"
            multiline
            maxLength={500}
          />
          <TouchableOpacity
            style={[styles.sendButton, { opacity: inputText.trim() ? 1 : 0.5 }]}
            onPress={sendMessage}
            disabled={!inputText.trim()}
          >
            <Send size={20} color="#000000" strokeWidth={2} />
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>

      {selectedMessageId && (
        <MintInsightButton
          onMint={() => handleMintInsight(selectedMessageId)}
          onClose={() => setSelectedMessageId(null)}
        />
      )}
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000000',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#222222',
  },
  headerLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 10,
    flex: 1,
  },
  headerRight: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 10,
  },
  headerBtn: {
    width: 36,
    height: 36,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#222222',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#111111',
  },
  docIcon: {
    width: 36,
    height: 36,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#222222',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#111111',
  },
  menuContainer: {
    position: 'absolute',
    right: 16,
    top: 64,
    backgroundColor: '#111111',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#222222',
    overflow: 'hidden',
  },
  menuItem: {
    paddingHorizontal: 12,
    paddingVertical: 10,
  },
  menuItemText: {
    color: '#FFFFFF',
    fontSize: 14,
  },
  title: {
    fontSize: 28,
    fontFamily: 'Inter-Bold',
    color: '#FFFFFF',
    fontWeight: '700',
  },
  subtitle: {
    fontSize: 14,
    fontFamily: 'Inter-Regular',
    color: '#888888',
    marginTop: 2,
  },
  headerInfo: {
    alignItems: 'flex-end',
  },
  costInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
  },
  costText: {
    fontSize: 12,
    fontFamily: 'Inter-Regular',
    color: '#888888',
  },
  chatContainer: {
    flex: 1,
  },
  messagesContainer: {
    flex: 1,
    paddingHorizontal: 20,
    paddingTop: 16,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'flex-end',
    paddingHorizontal: 20,
    paddingVertical: 16,
    borderTopWidth: 1,
    borderTopColor: '#222222',
    gap: 12,
  },
  textInput: {
    flex: 1,
    backgroundColor: '#111111',
    borderRadius: 20,
    paddingHorizontal: 16,
    paddingVertical: 12,
    color: '#FFFFFF',
    fontFamily: 'Inter-Regular',
    fontSize: 16,
    maxHeight: 100,
    borderWidth: 1,
    borderColor: '#333333',
  },
  sendButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#FFFFFF',
    justifyContent: 'center',
    alignItems: 'center',
  },
});